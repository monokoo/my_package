#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
# Copyright (C) 2016 fw867 <ffkykzs@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=91
STOP=15
EXTRA_COMMANDS="update"
EXTRA_HELP="	update	Perform the update immediately"

CONFIG=koolproxy
LOGFILE="/var/log/koolproxy.log"
LOCK_FILE=/var/lock/$CONFIG.lock
SOURCE_LIST=/usr/share/koolproxy/data/source.list
dnsmasq_restart=0

echo_date(){
	echo $(date "+%F %T"): $1 >>$LOGFILE
}

config_n_get() {
	local ret=$(uci get $CONFIG.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

config_t_get() {
	local index=0
	[ -n "$4" ] && index=$4
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

clean_log() {
logsnum=$(cat $LOGFILE 2>/dev/null | wc -l)
if [ "$logsnum" -gt 100 ];then
	rm -f $LOGFILE >/dev/null 2>&1 &
	echo_date 日志文件过长，清空处理！
fi
}

factor(){
if [ -z "$1" ] || [ -z "$2" ]; then
		echo ""
	else
		echo "$2 $1"
fi
}

load_acl(){
	local mac
	local ip
	local mode
	config_get mac $1 mac
	config_get ip $1 ipaddr
	config_get mode $1 filter_mode
	if [ -n "$mode" ] && [ -n "$ip" ] || [ -n "$mac" ]; then
		iptables -t nat -A KOOLPROXY $(factor $ip "-s") $(factor $mac "-m mac --mac-source") -p tcp -$(get_jump_mode $mode) $(get_action_chain $mode)
	fi
}

get_kprule_status(){
	status=`echo "$kp_third_rules" | grep -c $1`
	echo $status
}

load_kp_rules(){
	kp_video_rules=$(get_kprule_status kp_video_rules)
	kp_easylist_rules=$(get_kprule_status kp_easylist_rules)
	kp_abx_rules=$(get_kprule_status kp_abx_rules)
	kp_fanboy_rules=$(get_kprule_status kp_fanboy_rules)
	
	if [ "$kp_video_rules" -eq 1 -o "$kp_online_rules" -eq 1 ]; then
		user_rule=1
	else
		user_rule=0
	fi

	cat <<-EOF >$SOURCE_LIST
	$kp_online_rules|koolproxy.txt|https://kprule.com/koolproxy.txt|静态规则
$kp_online_rules|daily.txt|https://kprule.com/daily.txt|每日规则
$kp_video_rules|kp.dat|https://kprule.com/kp.dat|视频规则
$user_rule|user.txt||自定义规则
$kp_easylist_rules|easylistchina.txt|https://kprule.com/easylistchina.txt|ABP规则
$kp_abx_rules|chengfeng.txt|https://kprule.com/chengfeng.txt|乘风规则
$kp_fanboy_rules|fanboy.txt|https://kprule.com/fanboy.txt|Fanboy规则
EOF
	if [ "$kp_video_rules" == "1" -a "kp_online_rules" == "0" -a "$kp_easylist_rules" == "0" -a "$kp_abx_rules" == "0" -a "$kp_fanboy_rules" == "0" ]; then
		echo_date 加载【视频规则】
	else
		if [ "$kp_online_rules" == "1" ]; then
			echo_date 加载【默认规则】
		fi
		if [ "$kp_video_rules" == "1" ]; then
			echo_date 加载【视频规则】
		fi		
		if [ "$kp_easylist_rules" == "1" ]; then
			echo_date 加载【ABP规则】
		fi
		if [ "$kp_abx_rules" == "1" ]; then
			echo_date 加载【乘风规则】
		fi
		if [ "$kp_fanboy_rules" == "1" ]; then
			echo_date 加载【Fanboy规则】
		fi
	fi
}

update(){
	/usr/sbin/adblockplus >>$LOGFILE 2>&1 &
}

iptables_ext() {
	iptables -t nat -C $2 $3 2>/dev/null
	local ret=$?
	if [ "$ret" -ne 0 ];then
		iptables -t nat -$1 $2 $3 2>/dev/null
	fi
}

get_config(){
	config_get GLOBAL_MODE $1 filter_mode adblock
	config_get REBOOT_MODE $1 reboot_mode disable
	config_get kp_online_rules $1 kp_online_rules 1
	config_get kp_third_rules $1 kp_third_rules
	config_get portEx $1 portEx
	config_get third_rule_update $1 third_rule_update
}
load_config() {
	ENABLED=$(config_t_get global enabled 0)
	[ $ENABLED -ne 1 ] && return 1
	return 0
}

add_dnsmasq() {
	[ "$GLOBAL_MODE" == "adblock" ] && {
		rm -rf /usr/share/koolproxy/adblock_tmp.conf /tmp/dnsmasq.d/adblock.conf
		cp -r /usr/share/koolproxy/adblock.conf /usr/share/koolproxy/adblock_tmp.conf
		[ -s "/etc/dnsmasq.d/kpadblock.conf" ] && {
			cat /etc/dnsmasq.d/kpadblock.conf | sed "s/,/\n/g" | sed "s/^/ipset=&\/./g" | sed "s/$/\/adblock/g"  >> /tmp/kpadblock.conf
			cat /tmp/kpadblock.conf >> /usr/share/koolproxy/adblock_tmp.conf && rm -rf /tmp/kpadblock.conf
		}
		ln -sf /usr/share/koolproxy/adblock_tmp.conf /tmp/dnsmasq.d/adblock.conf
		dnsmasq_restart=1
	}
}

gen_ca() {
	if [ ! -f "/usr/share/koolproxy/data/certs/ca.crt" ]||[ ! -f "/usr/share/koolproxy/data/private/ca.key.pem" ];then
		rm -rf /usr/share/koolproxy/data/private
		rm -rf /usr/share/koolproxy/data/certs/ca.crt
		sh /usr/share/koolproxy/data/gen_ca.sh >/dev/null 2>&1
	fi
}

stop_dnsmasq() {
	ENABLED=$(config_t_get global enabled 0)
	GLOBAL_MODE=$(config_t_get global filter_mode adblock)
	if [ "$GLOBAL_MODE" != "adblock" -o "$ENABLED" -eq 0 ];then
		sed -i '/koolproxy update/d' /etc/crontabs/root >/dev/null 2>&1
		[ -L "/tmp/dnsmasq.d/adblock.conf" ] && {
			rm -rf /tmp/dnsmasq.d/adblock.conf
			dnsmasq_restart=1
		}
	fi
}

restart_dnsmasq(){
	[ "$dnsmasq_restart" -eq 1 ] && /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

get_action_chain() {
	case "$1" in
		disable)
			echo "RETURN"
		;;
		global)
			echo "KOOLPROXY_HTTP"
		;;
		globalWithHttps)
			echo "KOOLPROXY_HTTPS"
		;;
		adblock)
			echo "KOOLPROXY_BLACK_HTTP"
		;;
		adblockWithHttps)
			echo "KOOLPROXY_BLACK_HTTPS"
		;;
		fullport)
			echo "KOOLPROXY_FULL_PORT"
		;;
	esac
}

get_jump_mode(){
	case "$1" in
		disable)
			echo "j"
		;;
		*)
			echo "g"
		;;
	esac
}

add_koolproxy_cru(){
	[ "$third_rule_update" -eq 1 ] && {
		time=$(config_t_get global time_update)
		wirtecron=$(cat /etc/crontabs/root | grep "0 $time * * *" | grep "koolproxy update")
		if [ -z "$wirtecron" ];then
			sed -i '/koolproxy update/d' /etc/crontabs/root >/dev/null 2>&1
			echo "0 $time * * * /etc/init.d/koolproxy update" >> /etc/crontabs/root 
		fi
	}
}

add_rule() {
	iptables -t nat -N KOOLPROXY 2>/dev/null
	iptables -t nat -N KOOLPROXY_HTTP 2>/dev/null
	iptables -t nat -N KOOLPROXY_HTTPS 2>/dev/null
	iptables -t nat -N KOOLPROXY_BLACK_HTTP 2>/dev/null
	iptables -t nat -N KOOLPROXY_BLACK_HTTPS 2>/dev/null
	iptables -t nat -N KOOLPROXY_FULL_PORT 2>/dev/null
	
	#创建所需的ipset
	IPSET_ADB="adblock"
	ipset -! create $IPSET_ADB iphash && ipset -! add $IPSET_ADB 110.110.110.110 2>/dev/null
	sed -e "s/^/add $IPSET_ADB &/g" /etc/gfwlist/adblockip | awk '{print $0} END{print "COMMIT"}' | ipset -R 2>/dev/null
	cat /usr/share/koolproxy/data/rules/koolproxy.txt /usr/share/koolproxy/data/rules/daily.txt /usr/share/koolproxy/data/rules/user.txt | grep -Eo "(.\w+\:[1-9][0-9]{1,4})/" | grep -Eo "([0-9]{1,5})" | sort -un | sed -e '$a\80' -e '$a\443' | sed -e "s/^/-A kp_full_port &/g" -e "1 i\-N kp_full_port bitmap:port range 0-65535 " | ipset -R -!
	
	#生成代理规则
	#  忽略特殊IP段
	lan_ipc=`ip address show br-lan | grep -w "inet" |awk '{print $2}'`  #当前LAN IP段
	[ -z "$lan_ipc" ] && lan_ipc=`echo $(uci get network.lan.ipaddr)/24`
	iptables_ext A KOOLPROXY "-d 0.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 10.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 100.64.0.0/10 -j RETURN"
	iptables_ext A KOOLPROXY "-d 127.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 169.254.0.0/16 -j RETURN"
	iptables_ext A KOOLPROXY "-d 172.16.0.0/12 -j RETURN"
	iptables_ext A KOOLPROXY "-d 192.168.0.0/16 -j RETURN"
	iptables_ext A KOOLPROXY "-d 224.0.0.0/4 -j RETURN"
	iptables_ext A KOOLPROXY "-d 240.0.0.0/4 -j RETURN"
	[ -n "$lan_ipc" ] && iptables_ext A KOOLPROXY "-d $lan_ipc -j RETURN"
	#  生成对应CHAIN
	LOCAL_PORT=3000
	iptables_ext A KOOLPROXY_HTTP "-p tcp -m multiport --dport 80 -j REDIRECT --to-ports $LOCAL_PORT"
	iptables_ext A KOOLPROXY_HTTPS "-p tcp -m multiport --dport 80,443 -j REDIRECT --to-ports $LOCAL_PORT"
	iptables_ext A KOOLPROXY_BLACK_HTTP "-p tcp -m multiport --dport 80 -m set --match-set $IPSET_ADB dst -j REDIRECT --to-ports $LOCAL_PORT"
	iptables_ext A KOOLPROXY_BLACK_HTTPS "-p tcp -m multiport --dport 80,443 -m set --match-set $IPSET_ADB dst -j REDIRECT --to-ports $LOCAL_PORT"
	
	#端口控制
	if [ -n "$portEx" ]; then
		echo_date 开启端口控制：并排除端口：$portEx
		iptables_ext A KOOLPROXY_FULL_PORT "-p tcp -m multiport ! --dport $portEx -m set --match-set kp_full_port dst -j REDIRECT --to-ports $LOCAL_PORT"
	else
		iptables_ext A KOOLPROXY_FULL_PORT "-p tcp -m set --match-set kp_full_port dst -j REDIRECT --to-ports $LOCAL_PORT"
	fi
	
	#加载局域网ACL
	config_foreach load_acl acl_rule
	#加载默认访问控制模式
	iptables -t nat -A KOOLPROXY -p tcp -j $(get_action_chain $GLOBAL_MODE)
	
	# 重定所有流量到 KOOLPROXY
	PR_NU=`iptables -nvL PREROUTING -t nat |sed 1,2d | sed -n '/prerouting_rule/='`
	if [ -z "$PR_NU" ]; then
		PR_NU=1
	else
		let PR_NU+=1
	fi
	#确保添加到prerouting_rule规则之后
	iptables -t nat -I PREROUTING $PR_NU -p tcp -j KOOLPROXY
	# if [ "$GLOBAL_MODE" == "adblock" ]; then
		# # ipset 黑名单模式
		# iptables -t nat -I PREROUTING $PR_NU -p tcp -m set --match-set $IPSET_ADB dst -j KOOLPROXY
	# else
		# #其他模式
		# iptables -t nat -I PREROUTING $PR_NU -p tcp -j KOOLPROXY
	# fi
	
}

del_rule() {
	kp_nums=`iptables -t nat -L PREROUTING 2> /dev/null|grep -c "KOOLPROXY"`
	if [ -n "$kp_nums" ]; then
		until [ "$kp_nums" = 0 ]
	do
		kp_rules=`iptables -t nat -L PREROUTING --line-num 2> /dev/null|grep "KOOLPROXY" |awk '{print $1}'`
		for kp_rule in $kp_rules
		do
			iptables -t nat -D PREROUTING $kp_rule 2> /dev/null
			break
		done
		kp_nums=`expr $kp_nums - 1`
	done
	fi
	iptables -t nat -F KOOLPROXY 2>/dev/null && iptables -t nat -X KOOLPROXY 2>/dev/null
	iptables -t nat -F KOOLPROXY_HTTP 2>/dev/null && iptables -t nat -X KOOLPROXY_HTTP 2>/dev/null
	iptables -t nat -F KOOLPROXY_HTTPS 2>/dev/null && iptables -t nat -X KOOLPROXY_HTTPS 2>/dev/null
	iptables -t nat -F KOOLPROXY_BLACK_HTTP 2>/dev/null && iptables -t nat -X KOOLPROXY_BLACK_HTTP 2>/dev/null
	iptables -t nat -F KOOLPROXY_BLACK_HTTPS 2>/dev/null && iptables -t nat -X KOOLPROXY_BLACK_HTTPS 2>/dev/null
	iptables -t nat -F KOOLPROXY_FULL_PORT 2>/dev/null && iptables -t nat -X KOOLPROXY_FULL_PORT 2>/dev/null
}

dns_takeover(){
	ss_chromecast=`uci -q get shadowsocks.@global[0].dns_53`
	ss_enable=`iptables -t nat -L PREROUTING |grep SHADOWSOCKS |wc -l`
	[ -z "$ss_chromecast" ] && ss_chromecast=0
	lan_ipaddr=`uci get network.lan.ipaddr`
	chromecast_nu=`iptables -t nat -L PREROUTING -v -n --line-numbers|grep "dpt:53"|awk '{print $1}'`
	is_right_lanip=`iptables -t nat -L PREROUTING -v -n --line-numbers|grep "dpt:53" |grep "$lan_ipaddr"`
	if [ "$GLOBAL_MODE" == "adblock" ]; then
		if [ -z "$chromecast_nu" ]; then
			echo_date 黑名单模式开启DNS劫持
			iptables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		else
			if [ -z "$is_right_lanip" ]; then
				echo_date 黑名单模式开启DNS劫持
				iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
				iptables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
			else
				echo_date DNS劫持规则已经添加，跳过~
			fi
		fi
	else
		if [ "$ss_chromecast" -eq 0 ] || [ "$ss_enable" -eq 0 ]; then
			if [ -n "$chromecast_nu" ]; then
				echo_date 全局过滤模式下删除DNS劫持
				iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
				echo_date done
				echo_date
			fi
		fi
	fi
}

del_dns_takeover(){
	ss_chromecast=`uci -q get shadowsocks.@global[0].dns_53`
	ss_enable=`iptables -t nat -L PREROUTING |grep SHADOWSOCKS |wc -l`
	[ -z "$ss_chromecast" ] && ss_chromecast=0
	if [ "$ss_chromecast" -eq 0 ] || [ "$ss_enable" -eq 0 ]; then
		chromecast_nu=`iptables -t nat -L PREROUTING -v -n --line-numbers|grep "dpt:53"|awk '{print $1}'`
		[ -n "$chromecast_nu" ] && iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
	fi
}

write_reboot_job(){
	[ ! -f  "/etc/crontabs/root" ] && touch /etc/crontabs/root
	CRONTAB=`cat /etc/crontabs/root | grep "koolproxy restart"`
	[ -n "$CRONTAB" ] && sed -i '/koolproxy restart/d' /etc/crontabs/root >/dev/null 2>&1
	if [ "$REBOOT_MODE" == "regular" ]; then
		regular_time=$(config_t_get global regular_time 5)
		echo "0 $regular_time * * * /etc/init.d/koolproxy restart" >> /etc/crontabs/root
	elif [ "$REBOOT_MODE" == "interval" ]; then
		interval_time=$(config_t_get global interval_time 24)
		echo "0 */$interval_time * * * /etc/init.d/koolproxy restart" >> /etc/crontabs/root
	fi
}

remove_reboot_job(){
	jobexist=`cat /etc/crontabs/root 2>/dev/null | grep "koolproxy restart"`
	[ -n "$jobexist" ] && sed -i '/koolproxy restart/d' /etc/crontabs/root >/dev/null 2>&1
}

del_ipset_rule(){
	ipset -F adblock >/dev/null 2>&1 &
	ipset -X adblock >/dev/null 2>&1 &
	ipset -F kp_full_port >/dev/null 2>&1 &
	ipset -X kp_full_port >/dev/null 2>&1 &
}

set_lock(){
	exec 1000>"$LOCK_FILE"
	flock -x 1000
}

unset_lock(){
	flock -u 1000
	rm -rf "$LOCK_FILE"
}

start() {
	! load_config && exit 0
	[ "$(iptables -t nat -L PREROUTING 2>/dev/null| grep -c KOOLPROXY)" -ne 0 ] && exit 0;
	gen_ca
	#config_foreach get_rule source
	#防止并发开启服务
	set_lock
	config_load $CONFIG
	config_foreach get_config global
	load_kp_rules
	/usr/share/koolproxy/koolproxy --mark -d
	add_dnsmasq && restart_dnsmasq
	add_rule
	dns_takeover
	add_koolproxy_cru
	write_reboot_job
	unset_lock
	return 0
}

stop() {
	clean_log
	set_lock
	del_rule
	del_dns_takeover
	remove_reboot_job
	del_ipset_rule
	kill -9 $(ps|grep '/usr/share/koolproxy/koolproxy'|grep -v 'grep'|awk '{print$1}') >/dev/null 2>&1
	stop_dnsmasq && restart_dnsmasq
	unset_lock
}
