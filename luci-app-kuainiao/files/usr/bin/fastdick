#!/bin/ash -x

# Writen by zz090923610
# Not for any kind of commercial use.

log()
{
	logger -s "Thunder FastNiao" "$1"
}

json_read()
{
	#1, json; 2, key to read
	json="$1"
	key=."$2"
	_tmp="$(jsonfilter -s "$json" -e value=@"$key" 2>/dev/null)"
	eval "$_tmp"
	echo -n "$value"

}
json_dump()
{
	echo "$1" >>/tmp/thunder_fastdick_json
}


check_kill_exist_instance()
{
	cd /proc
	for pid in [0-9]*
	do
		if grep "Name:	fastdick" $pid/status &>/dev/null
			then
			if [ "$pid" -eq "$$" ]
				then
				continue
			fi
			kill "$pid"
			for cpid in [0-9]*
			do
				if grep "PPid:	$pid" $cpid/status &>/dev/null
				then
				    name=`cat $cpid/status | grep "Name:" | sed 's/Name://' | tr -d ' \n\t'`
				    if [ "$name" = "sleep" ]
				    then
					    kill $cpid
				    fi
				fi
			done
			sleep 10
		fi
	done
}


generate_pwd_rsa_hex()
{
	$(log "Generating PWD RSA HEX")
    #first, encoding passwd using rsa
    a=`echo "$passwd_md5" | openssl rsautl -raw -pubin -inkey /etc/thunder.key  -hexdump | tr [a-z] [A-Z]`
    a=`echo $a | grep -o '00[0-9]0 \- \([A-Z0-9]\{2\}[- ]\)\{16\}' | sed 's/00[0-9]0 - //g' | tr -d " \-\n"`

    echo -n "$a"

}


get_wrap_wan_macaddr()
{
	# check wan
 	wan=`cat /var/state/network | grep -o "[a-z]*wan.up=[\'\s]*1[\'\s]*" | grep -o "[a-zA-Z0-9]*\." | tr -d '.'`

	if [ $wan = "wwan" ] 
	then
		wan_iface=`uci -P /var/state get network.wwan.ifname 2>/dev/null`
	else
		wan_iface=`uci -P /var/state get network.$wan.device 2>/dev/null`
	fi
	wan_mac="$(ifconfig "$wan_iface" | awk '/HWaddr/ { print $5 }') 2>/dev/null"

	if [ `echo -n "$wan_mac" | tr -d ':' | wc -c` -ne 12  ]
		then
		wan_mac="$(ifconfig br-lan | awk '/HWaddr/ { print $5 }') 2>/dev/null"
	fi
	
	if [ `echo -n "$wan_mac" | tr -d ':' | wc -c` -ne 12  ]
	then
		wan_mac="00:11:22:33:44:55"
	fi
	wrap_wan_mac=`echo -n "$wan_mac" | tr -d ':'`004V
	echo -n "$wrap_wan_mac"
}


thunder_login()
{
# generate req body
    pwd_rsa_hex=$(generate_pwd_rsa_hex)
    wrap_wan_macaddr=$(get_wrap_wan_macaddr)
	body="{\
\"protocolVersion\": 101,\
\"sequenceNo\": 1000001,\
\"platformVersion\": 1,\
\"peerID\": \"$wrap_wan_macaddr\",\
\"businessType\": 68,\
\"clientVersion\": \"1.1\",\
\"isCompressed\": 0,\
\"cmdID\": 1,\
\"userName\": \"$name\",\
\"passWord\": \"$pwd_rsa_hex\",\
\"loginType\": \"$TYPE_NORMAL_ACCOUNT\",\
\"sessionID\": \"\",\
\"verifyKey\": \"\",\
\"verifyCode\": \"\",\
\"appName\": \"ANDROID-com.xunlei.vip.swjsq\",\
\"rsaKey\": {\
\"e\": \"$e\",\
\"n\": \"$n\"\
},\
\"extensionList\": \"\"\
}"

echo -n "$body" > /tmp/thunder_req_body
# end of generate req body
	url_login="https://login.mobile.reg2t.sandai.net:443"
	login_header='-H "Content-Type:" \
				  -H "Connection:Keep-Alive" \
				  -H "Accept-Encoding:gzip" \
				  -H "android-async-http/1.4.3 (http://loopj.com/android-async-http)"'
	$(log "Trying login")
	login_result=`curl -A "User-Agent: swjsq/1.7.1" --insecure "$login_header" \
--data @/tmp/thunder_req_body "$url_login" 2>/dev/null`
	rm -f /tmp/thunder_req_body 2>/dev/null
	echo -n "$login_result"

}

speed_up_api()# 1,command;2,userID;3,sessionID
{
	$(log Performing-"$1"-action)
	wrap_mac=$(get_wrap_wan_macaddr)
	api_url=http://"$interface_ip":"$interface_port"/v2/"$1"?peerid="$wrap_mac"\&userid="$2"\&user_type=1\&sessionid="$sessionID"

	api_header='-H "Content-Type:" \
			"Connection: Keep-Alive" \
			"Accept-Encoding: gzip" \
    			"User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 5.0.1; SmallRice Build/LRX22C)"'
	api_result=`curl  -A "User-Agent: swjsq/1.7.1" --insecure "$api_header" "$api_url" 2>/dev/null`
	echo -n "$api_result"
}


sigterm()           
{
    

    if [ "$is_speedup" -eq 0 ]
    then
        exit 0
    else
        a=$(speed_up_api "recover" "$userID" "$sessionID")
        $(log "Stop speedup") 
        exit 0
    fi
	$(log "Quit")	
}

test_md5()
{
	val_of_test=`echo -n "test" | md5sum | tr -d " -"`
	if [ "$val_of_test" = "098f6bcd4621d373cade4e832627b4f6" ]
		then
		echo -n "right"
	else
		echo -n "wrong"
	fi
}

# script __main__
trap 'sigterm' TERM
trap 'sigterm' INT

# fetch basic info
name=`uci get fastdick.setting.name 2>/dev/null`
passwd=`uci get fastdick.setting.passwd 2>/dev/null`
enabled=`uci get fastdick.setting.enabled 2>/dev/null`
if [ "$enabled" -ne 1 ]
	then
	$(log "Thunder FastNiao not enabled, exit.")
	exit 1
fi

if [ `echo -n "$name" | wc -c` -eq 0 -o `echo -n "$passwd" | wc -c` -eq 0 ]
	then
	$(log "Username and Password should not be empty, exit.")
	exit 1
fi

$(check_kill_exist_instance)

# calculate passwd_md5
$(log "Generating passwd md5") 
if [ `test_md5` = 'wrong' ]
	then
	$(log "md5sum doesn't work, exit.")
	exit 1
fi
passwd_md5=`echo -n "$passwd" | md5sum | tr -d " -"`

if [ `echo -n "$passwd_md5" | wc -c` -ne 32 ]
	then
	$(log "md5sum should be 32 chars, exit.")
	exit 1
fi

TYPE_NORMAL_ACCOUNT=0
n="D6F1CFBF4D9F70710527E1B1911635460B1FF9AB7C202294D04A6F135A906E90E2398123C234340A3CEA0E5EFDCB4BCF7C613A5A52B96F59871D8AB9D240ABD4481CCFD758EC3F2FDD54A1D4D56BFFD5C4A95810A8CA25E87FDC752EFA047DF4710C7D67CA025A2DC3EA59B09A9F2E3A41D4A7EFBB31C738B35FFAAA5C6F4E6F"
e="10001"
sessionID=''
userID=''
is_speedup=0




login_result=$(thunder_login)
errno=$(json_read "$login_result" "errorCode")

if [ "$errno" -ne 0 ]
	then
	$(log "Login Failed, maybe wrong username or password, dump response json and exit")
	$(log "$login_result")
	$(json_dump "$login_result")
	exit 1
fi

sessionID=$(json_read "$login_result" "sessionID")

if [ `echo -n "$sessionID" | wc -c` -e 0 ]
then
	$(log "Login Failed, sessionID should not be empty, maybe is issue #2 500 Internal Error?")
	$(log "$login_result")
	$(json_dump "$login_result")
	exit 1
fi

$(log "Login Success") 

isVIP=$(json_read "$login_result" "isVip")

if [ "$isVIP" -ne 1 ]
then
	$(log "Sorry you are not a VIP, exit") 
	$(json_dump "$login_result")
	exit 1
fi

$(log "You are a VIP, now preparing speedup")

userID=$(json_read "$login_result" "userID")
$(log "Fetching Server Info")
info_json=`curl http://api.portal.swjsq.vip.xunlei.com:81/v2/queryportal 2>/dev/null`
errno=$(json_read "$info_json" "errno")
if [ "$errno" -ne 0 ]
then #mean's something not right
	$(log "Fetching Server info failed, dump response json and exit") 
	$(log "$info_json") 
	$(json_dump "$info_json")
	exit 1
fi
interface_ip=$(json_read "$info_json" "interface_ip")
interface_port=$(json_read "$info_json" "interface_port")
#should we check server info here?

speedup_check=$(speed_up_api "bandwidth" "$userID" "$sessionID")

can_upgrade=$(json_read "$speedup_check" "can_upgrade")

if [ "$can_upgrade" -ne 1 ]
then
	$(log "Sorry Your network doesn't support speedup, Aborting") 
	$(json_dump "$speedup_check")
	exit 1
fi

# now let's speedup

loop=0
speedup_result=$(speed_up_api "upgrade" "$userID" "$sessionID")
status=$(json_read "$speedup_result" "errno")
if [ "$status" -eq 0 ]
	then
	$(log "Speedup success") 
	is_speedup=1

elif [ "$status" -eq 812 ]
	then
	$(log "Already Speedup") 
	is_speedup=1
else
	$(log "Speedup failed, dump response json and exit") 
	is_speedup=0
	$(log "$speedup_result") 
	$(json_dump "$speedup_result")
	exit 1
fi
while true; do
	sleep 295
	if [ "$loop" -eq 5 ]
	then
		$(flush_log)
		loop=0
		speedup_result=$(speed_up_api "recover" "$userID" "$sessionID")
		sleep 10
		speedup_result=$(speed_up_api "upgrade" "$userID" "$sessionID")
        status=$(json_read "$speedup_result" "errno")
        if [ "$status" -eq 0 ]
	    then
            $(log "Re-speedup success") 
	    	is_speedup=1
	    elif [ "$status" -eq 812 ]
		then
			$(log "Already Speedup") 
			is_speedup=1
        else
            $(log "Re-speedup failed, dump response json, dump response json and exit") 
            $(log "$speedup_result") 
            $(json_dump "$speedup_result")
			exit 1
        fi

	else
		loop=$(($loop+1))
		speedup_result=$(speed_up_api "keepalive" "$userID" "$sessionID")
        status=$(json_read "$speedup_result" "errno")
        if [ "$status" -eq 0 ]
        then
        	    $(log Keepalive-"$loop"-success)
			is_speedup=1
        else
        	$(log "Keepalive failed, dump response json, dump response json and exit") 
            $(log "$speedup_result") 
            $(json_dump "$speedup_result")
			exit 1
	    fi
	fi
done
