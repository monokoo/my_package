<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%
    local fs = require "nixio.fs"
    local stat = require "luci.tools.status"
    local cursor = luci.model.uci.cursor()
    local db_path = cursor:get("wrtbwmon", "general", "path")
    local cmd_S = "wrtbwmon -b -46 -f " .. db_path .. " -p /tmp/usage.htm -u /etc/wrtbwmon.user >> /dev/null 2>&1 &"

    if luci.http.formvalue("defFile") == "1" then

        local def = tostring(
            fs.readfile("/etc/wrtbwmon.user")) or ""

        luci.http.prepare_content("application/json")
        luci.http.write_json(def)

        return

    elseif luci.http.formvalue("leasesFile") == "1" then

        local leases = stat.dhcp_leases()

        luci.http.prepare_content("application/json")
        luci.http.write_json(leases)

        return    

    elseif  luci.http.formvalue("checkdency") == "1" then

        if require("luci.model.ipkg").installed("wrtbwmon") then
            luci.http.prepare_content("application/json")
            luci.http.write_json("1")
        end

        return

    elseif  luci.http.formvalue("ipv4") == "1" then

        local cmd_P = "wrtbwmon -4 -f " .. db_path
        if not nixio.fs.access("/var/run/wrtbwmon.pid") then
            luci.sys.call(cmd_S)
        else
            luci.sys.call(cmd_P)
        end
        luci.http.prepare_content("application/json")
        luci.http.write_json(luci.sys.exec("cat " .. db_path))

        return

    elseif  luci.http.formvalue("ipv6") == "1" then

        local cmd_P = "wrtbwmon -6 -f " .. db_path
        if not nixio.fs.access("/var/run/wrtbwmon.pid") then
            luci.sys.call(cmd_S)
        else
            luci.sys.call(cmd_P)
        end
        luci.http.prepare_content("application/json")
        luci.http.write_json(luci.sys.exec("cat " .. db_path .. "6"))

        return

    elseif  luci.http.formvalue("reset") == "1" then

        local ret = luci.sys.call("wrtbwmon -f " .. db_path .. " && rm " .. db_path .. " && rm " .. db_path .. "6")
        return

    end
-%>

<%+header%>

<fieldset class="cbi-section">

<legend><%:Usage - Details%></legend>

    <div style="overflow:hidden; border-bottom:1px solid #d4dde4">
        <div style="width:30%; float:left;">
            <select id="Select46" >
                <option value="ipv4"  selected="selected" >ipv4</option>
                <option value="ipv6">ipv6</option>
                <!--option value="ipv46">ipv6 && ipv6</option-->
            </select>
        </div>

        <div style="width:30%; float:left;">
            <label for="isShow" style="vertical-align:middle;"><%:Show Zeros%></label>
            <input id="isShow" type="checkbox" name="showing" style="vertical-align:middle;"/>
        </div>

        <div style="width:30%; float:left;">
            <label><%:Bandwidth%></label>
            <input type="text" id="setBD" value="1M" />
            <label id="checkBD"></label>
        </div>

        <div style="width 10%;float:right;">
            <input id="resetDatabase" type="button" class="cbi-button" style="right: 0;bottom: 0;" value="<%:Reset Database%>" >
        </div>
    </div>

    <div style="overflow:hidden;">
        <div style="width:70%; float:left;">
            <small>
                <span id="updated"></span><span id="updating"></span>
            </small>
        </div>

        <div style="width:30%; float:right; right:0;text-align:right;">
            <label>
                <small><%:Auto update every%></small>
                <select id="intervalSelect" style="float:right;width:80px;height:28px;font-size:11px;">
                    <option value="-1"><%:Disabled%></option>
                    <option value="1"><%:1 second%></option>
                    <option value="2"  selected="selected"><%:2 seconds%></option>
                    <option value="5"><%:5 seconds%></option>
                    <option value="10"><%:10 seconds%></option>
                    <option value="20"><%:20 seconds%></option>
                    <option value="30"><%:30 seconds%></option>
                    <option value="40"><%:40 seconds%></option>
                    <option value="50"><%:50 seconds%></option>
                    <option value="60"><%:60 seconds%></option>
                    <option value="120"><%:2 minutes%></option>
                    <option value="180"><%:3 minutes%></option>
                </select>
            </label>
        </div>
    </div>

    <div>
        <table>
        <caption><label id="updown"></label></br><label id="progress"></label></caption>
            <tbody id="tableBody"><tr><td><%:Loading...%></td></tr></tbody>
        </table>
    </div>
</fieldset>

<script type="text/javascript">

var scheduleTimeout, updateTimeout, isScheduled = true, interval = document.getElementById('intervalSelect').value;
var sortedColumn = 7, sortedEltId = "thTotal", sortDirection = "desc";

//Get the html page path
var re = /(.*?admin\/status\/nlbw\/[^/]+)/;
var basePath = ('<%=REQUEST_URI%>').match(re)[1];

(function () {
    var oldDate, oldValues = [];
    var defArr = [], leasesArr = [];
    var bandwidth = 1000000;
    var isShowZero = 0;

    function getSize(size) {
        var prefix = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z'];
        var precision, base = 1000, pos = 0;
        while (size > base) {
            size /= base;
            pos++;
        }
        if (pos > 1) precision = 100; else precision = 1;
        return (Math.round(size * precision) / precision) + ' ' + prefix[pos] + 'B';
    }

    function dateToString(date) {
        return date.toLocaleString().replace(/(^\s*)|(\s*$)/g, "");
    }

    function isArray(obj) {
        return obj instanceof Array;
    }

    function handleError() {
        // TODO handle errors
        // var message = 'Something went wrong...';
    }

    function handleValues(values) {
        if (!isArray(values)) return '';
        // find data

        var data = [], totals = [0, 0, 0, 0, 0];
        for (var i = 0; i < values.length; i++) {
            var d = handleRow(values[i]);
            if (d[1]) {
                data.push(d);
                // get totals
                for (var j = 0; j < totals.length; j++) {
                    totals[j] += parseInt(d[1][3 + j]);
                }
            }
        }

        data.sort(function (x, y) {
            var byCol,byDirection
            if ( x[1][sortedColumn] == y[1][sortedColumn] ){
                if ( x[1][7] != 0 || y[1][7] !=0 ) {
                    byCol = 7
                    byDirection = "desc"
                }else {
                    byCol = 0
                    byDirection = "asc"
                }
            }
            else{
                byCol = sortedColumn
                byDirection = sortDirection
            }

            var n1 = x[1][byCol],n2 = y[1][byCol];
            var a = n1.split(/[^\w\d]/g),b = n2.split(/[^\w\d]/g);
            var flag = ( byDirection =="desc" ? 1 : -1);

            var tag=""
            if ( n1.match(/\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}\:\x{2}/i) ){
                tag = "MAC"
            }
            else if ( n1.match(/\d+\.\d+\.\d+\d+/i) ){
                tag = "IP"
            }

            for (i = 0 ; i < a.length ; i++ ){
                if ( tag == "MAC" ){
                    num1=parseInt(a[i],16);
                    num2=parseInt(b[i],16);
                }else if ( tag == "IP" ){
                    num1=parseInt(a[i]);
                    num2=parseInt(b[i]);
                }else if ( a[i].match(/[a-zA-Z]/ig) || b[i].match(/[a-zA-Z]/ig) ){
                    num1=a[i];
                    num2=b[i];
                }else{
                    num1=parseInt(a[i]);
                    num2=parseInt(b[i]);
                }

                if (num1 < num2) return ( 1 * flag );
                if (num1 > num2) return ( -1 * flag );
            }
            return 0;
        });

        // display data
        var result = '<tr>\
                            <th id="thClient" style="width:17%"><%:Clients%></th>\
                            <th id="thMAC" style="width:10%"><%:MAC Address%></th>\
                            <th id="thDownload" style="width:8%"><%:Download%></th>\
                            <th id="thUpload" style="width:8%"><%:Upload%></th>\
                            <th id="thTotalDown" style="width:9%"><%:Total Down%></th>\
                            <th id="thTotalUp" style="width:9%"><%:Total Up%></th>\
                            <th id="thTotal" style="width:9%"><%:Total%></th>\
                            <th id="thFirstSeen" style="width:15%"><%:First Seen%></th>\
                            <th id="thLastSeen" style="width:15%"><%:Last Seen%></th>\
                          </tr>';
        for (var k = 0; k < data.length; k++) {
            result += data[k][0];
        }
        result += '<tr><th><%:TOTAL%></th>';
        result += '<td align="middle"><b>' + data.length + ' <%:Clients%>' + '</b></td>'
        for (var m = 0; m < totals.length; m++) {
            var t = totals[m];
            result += '<td align="middle">' + getSize(t) + (m < 2 ? '/s' : '') + '</td>'
        }
        result += '</tr>';

        document.getElementById('updown').innerHTML = getSize(totals[0]) + '/s' + '<img src="<%=resource%>/cbi/down.gif" alt="&#8679" align="center"/>' +
                                                      getSize(totals[1]) + '/s' + '<img src="<%=resource%>/cbi/up.gif" alt="&#8681" align="center"/>';
        document.getElementById('progress').innerHTML = '<progress style="width:100%;" value=' + totals[0]/bandwidth + ' max=' + 1 +
                                                        ' title=' + getSize(totals[0]).replace(" ","") + '/s' + ' ></progress>';
        return result;
    }

    function handleRow(data) {
        // check if data is array
        if (!isArray(data)) return [''];

        var flag;

        for (var i = 0; i < defArr.length; i++) {

            // Get the HostName
            if (defArr[i][0] === data[0]) {
                data[2] = defArr[i][1];
                flag = 1;
                break;
            }
        }

        if (!flag){
            for (var i = 0; i < leasesArr.length; i++) {

            // Get the HostName
                if (leasesArr[i][0] === data[0]) {
                    if (!leasesArr[i][1]){
                        data[2] = data[0];
                    }else{
                        data[2] = leasesArr[i][1];
                    }
                    flag = 1;
                    break;
                }
            }
        }

        if (!flag){
            data[2] = data[0];
        }

        // find old data
        var oldData;
        for (var i = 0; i < oldValues.length; i++) {
            var cur = oldValues[i];
            // compare mac addresses and ip addresses
            if (oldValues[i][0] === data[0] && oldValues[i][1] === data[1]) {
                oldData = cur;
                break;
            }
        }

        // find download and upload speeds
        var dlSpeed = 0, upSpeed = 0;
        if (oldData) {
            var now = new Date(),
                seconds = (now - oldDate) / 1000;
            dlSpeed = (data[3] - oldData[3]) / seconds;
            upSpeed = (data[4] - oldData[4]) / seconds;
        }

        // create rowData
        var rowData = [];
        for (var j = 0; j < data.length; j++) {
            rowData.push(data[j]);
            if (j === 2) {
                rowData.push(dlSpeed.toString(), upSpeed.toString());
            }
        }

        // create displayData
        var displayData = [
            '<td align="middle" title="' + data[1] + '">' + data[2] + '<br />' + data[1] + '</td>',
            '<td align="middle">' + data[0] + '</td>',
            '<td align="middle">' + getSize(dlSpeed) + '/s</td>',
            '<td align="middle">' + getSize(upSpeed) + '/s</td>',
            '<td align="middle">' + getSize(data[3]) + '</td>',
            '<td align="middle">' + getSize(data[4]) + '</td>',
            '<td align="middle">' + getSize(data[5]) + '</td>',
            '<td align="middle">' + data[6] + '</td>',
            '<td align="middle">' + data[7] + '</td>'
        ];

        // display row data
        var result = '<tr>';
        for (var k = 0; k < displayData.length; k++) {
            result += displayData[k];
        }
        result += '</tr>';
        return [result, rowData];
        }

    function registerTableEventHandlers() {
        // note these ordinals are into the data array, not the table output
        document.getElementById('thClient').addEventListener('click', function () {
            setSortColumn(this.id, 1, true); // hostname
        });
        document.getElementById('thMAC').addEventListener('click', function () {
            setSortColumn(this.id, 0, true); // MAC
        });
        document.getElementById('thDownload').addEventListener('click', function () {
            setSortColumn(this.id, 3, true); // dlspeed
        });
        document.getElementById('thUpload').addEventListener('click', function () {
            setSortColumn(this.id, 4, true); // ulspeed
        });
        document.getElementById('thTotalDown').addEventListener('click', function () {
            setSortColumn(this.id, 5, true); // total down
        });
        document.getElementById('thTotalUp').addEventListener('click', function () {
            setSortColumn(this.id, 6, true); // total up
        });
        document.getElementById('thTotal').addEventListener('click', function () {
            setSortColumn(this.id, 7, true); // total
        });
        document.getElementById('thFirstSeen').addEventListener('click', function () {
            setSortColumn(this.id, 8, true); // first seen
        });
        document.getElementById('thLastSeen').addEventListener('click', function () {
            setSortColumn(this.id, 9, true); // last seen
        });
    }

    function updateData(once) {
        var sel= document.getElementById('Select46').value       
        var ipvData;
        if (sel == "ipv4") {
            ipvData={
                ipv4: 1,
                ipv6: 0
            };
        }
        else if(sel == "ipv6"){
            ipvData={
                ipv4: 0,
                ipv6: 1
            };
        }

        XHR.get(basePath, ipvData,function(x, values){
            if (!values) {
                handleError();
            } else {
                var allRows = values.split(/\r?\n|\r/g);
                allRows.shift();
                allRows.pop();
                var v = [];
                for (var i = 0; i < allRows.length ; i++) {
                    var rowCells = allRows[i].split(',');

                    if ( isShowZero ) {
                        v.push(rowCells);
                    }else if ( parseInt(rowCells[5]) != 0 ) {
                        v.push(rowCells);
                    }
                }
                document.getElementById('tableBody').innerHTML = handleValues(v);
                setSortColumn(null, null, false);
                // set old values
                oldValues = v;
                // set old date
                oldDate = new Date();
                document.getElementById('updated').innerHTML = '<%:Last updated %>' + dateToString(oldDate) +'<%:.%> ';

                initLeasesFile();
                if (!once && interval > 0) reschedule(interval);
            }
        });
    }

    document.getElementById('intervalSelect').addEventListener('change', function () {
        interval = this.value;
        if (interval > 0) {
            // it is not scheduled, schedule it
            if (!isScheduled) {
                reschedule(interval);
            }
        } else {
            // stop the scheduling
            stopSchedule();
        }
    });

    document.getElementById('resetDatabase').addEventListener('click', function () {
        if (confirm('<%:This will delete the database file. Are you sure?%>')) {
            new XHR().post(basePath,{reset:1},
            function(xhr) {
                document.location.reload();
            })
        }
    });

    document.getElementById('setBD').addEventListener('input', function () {
        var tb = document.getElementById("checkBD");
        var strTest = (/^[0-9]+\.?[0-9]*[KMGTP]?$/g).test(this.value);

        if (strTest) {
            tb.innerHTML= '&#10004';
        }
        else{
            tb.innerHTML= '&#10006';
        }
    });

    document.getElementById('setBD').addEventListener('blur', function () {
        var tb = document.getElementById("checkBD");
        var strTest = (/^[0-9]+\.?[0-9]*[KMGTP]?$/g).test(this.value);

        if (strTest) {
            var num = (this.value).match(/^[0-9]+\.?[0-9]*/g);
            var base = (this.value).match(/[KMGTP]?$/);
            var unitBD = ["" , "K","M" , "G","T" , "P"]
            if(!num){
                bandwidth = 1000000;
            }else{
                for (i = 0; i < unitBD.length; i++){
                     if (base == unitBD[i]){
                         base = 1000**i;
                         break;
                     }
                     if (!base)
                         base = 1;
                }
                this.value = parseFloat(num) + unitBD[i];
                bandwidth = Math.round(parseFloat(num) * base);
            }
        }
        else{
           alert('Error! Bandwidth reset!!!');
           this.value = '1M';
           bandwidth = 1000000;
        }
        tb.innerHTML= "";
    });

    document.getElementById('isShow').addEventListener('click', function () {
        if ( this.checked == true ){
            isShowZero = 1
        }else{
            isShowZero = 0
        }
    });

    function stopSchedule() {
        window.clearTimeout(scheduleTimeout);
        window.clearTimeout(updateTimeout);
        setUpdateMessage('');
        isScheduled = false;
    }

    function reschedule(seconds) {
        isScheduled = true;
        seconds = seconds || 60;
        updateSeconds(seconds);
        scheduleTimeout = window.setTimeout(updateData, seconds * 1000);
    }

    function setUpdateMessage(msg) {
        document.getElementById('updating').innerHTML = msg;
    }

    function updateSeconds(start) {
        setUpdateMessage('<%:Updating again in%> <b>' + start + '</b> <%:seconds.%>');
        if (start > 0) {
            updateTimeout = window.setTimeout(function () {
                updateSeconds(start - 1);
            }, 1000);
        }
    }

    function setSortColumn(eltid, col, do_sort = false) {
        if (col != null ) {
            if ( col == sortedColumn ) {
                if (sortDirection == "desc")
                    sortDirection = "asc";
                else
                    sortDirection = "desc";
            }
            else {
                sortDirection = "desc";
            }
        }

        sortedColumn = col != null ? col : sortedColumn;
        sortedEltId = eltid ? eltid : sortedEltId;
        if (do_sort)
            document.getElementById('tableBody').innerHTML = handleValues(oldValues);
        e = document.getElementById(sortedEltId);
        if (e)
            e.innerHTML = e.innerHTML + (sortDirection == "asc" ? "&#x25B2" : "&#x25BC");
        registerTableEventHandlers();
    }

    // if dependency is successful run callback
    function checkForDependency(cb) {
        XHR.get(basePath, { checkdency: 1} , function(x, data) {
            if (data) {
                cb();
            }else {
                alert("<%:wrtbwmon is not installed!%>");
            }
        });
    }

    function initDefFile(){
        XHR.get(basePath, { defFile: 1 }, function(x, data) {
            if (data) {
                var HostData = data.split(/\r?\n|\r/g);
                for ( i = 0; i < HostData.length; i++) {
                    defArr.push(HostData[i].split(','));
                }
            }
        });
    }

    function initLeasesFile(){
        XHR.get(basePath, { leasesFile: 1 }, function(x, data) {
            if (data) {
                for (i = 0; i < data.length; i++){
                    leasesArr.push([data[i].macaddr,data[i].hostname]);
                }
            }
        });
    }

    initDefFile();
    checkForDependency(updateData);
    return 0;

})();

</script>

<%+footer%>
