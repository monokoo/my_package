#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
# Copyright (C) 2016 fw867 <ffkykzs@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=99

CONFIG=mia

uci_get_by_type() {
	local index=0
	if [ -n $4 ]; then
		index=$4
	fi
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

is_true() {
	case $1 in
		1|on|true|yes|enabled) echo 0;;
		*) echo 1;;
	esac
}

load_config() {
	ENABLED=$(uci_get_by_type basic enable)
	return $(is_true $ENABLED)
}

add_rule(){
local kp_enabled=0
local ss_enabled=0
[ "`iptables -t nat -L PREROUTING |grep SHADOWSOCKS 2>/dev/null |wc -l`" -gt 0 ] && ss_enabled=1
[ "`iptables -t nat -L PREROUTING |grep KOOLPROXY 2>/dev/null |wc -l`" -gt 0 ] && kp_enabled=1
for i in $(seq 0 100)
do
	local enable=$(uci_get_by_type macbind enable '' $i)
	local macaddr=$(uci_get_by_type macbind macaddr '' $i)
	local timeon=$(uci_get_by_type macbind timeon '' $i)
	local timeoff=$(uci_get_by_type macbind timeoff '' $i)
	local z1=$(uci_get_by_type macbind z1 '' $i)
	local z2=$(uci_get_by_type macbind z2 '' $i)
	local z3=$(uci_get_by_type macbind z3 '' $i)
	local z4=$(uci_get_by_type macbind z4 '' $i)
	local z5=$(uci_get_by_type macbind z5 '' $i)
	local z6=$(uci_get_by_type macbind z6 '' $i)
	local z7=$(uci_get_by_type macbind z7 '' $i)
	[ "$z1" == "1" ] && Z1="Mon,"
	[ "$z2" == "1" ] && Z2="Tue,"
	[ "$z3" == "1" ] && Z3="Wed,"
	[ "$z4" == "1" ] && Z4="Thu,"
	[ "$z5" == "1" ] && Z5="Fri,"
	[ "$z6" == "1" ] && Z6="Sat,"
	[ "$z7" == "1" ] && Z7="Sun"
	if [ -z $enable ] || [ -z $macaddr ] || [ -z $timeoff ] || [ -z $timeon ]; then
		break
	fi
	if [ "$enable" == "1" ]; then
		iptables -t filter -I MIA  -m mac --mac-source $macaddr -m time --kerneltz --timestart $timeon --timestop $timeoff --weekdays $Z1$Z2$Z3$Z4$Z5$Z6$Z7 -j DROP
		[ "$ss_enabled" -eq 1 ] && iptables -t nat -I SHADOWSOCKS $((i+1)) -m mac --mac-source $macaddr -m time --kerneltz --timestart $timeon --timestop $timeoff --weekdays $Z1$Z2$Z3$Z4$Z5$Z6$Z7 -j RETURN
		[ "$kp_enabled" -eq 1 ] && [ -z "`iptables -t nat -L KOOLPROXY | grep -w RETURN | grep -w "$macaddr"`" ] && \
			iptables -t nat -I KOOLPROXY $((i+1)) -m mac --mac-source $macaddr -m time --kerneltz --timestart $timeon --timestop $timeoff --weekdays $Z1$Z2$Z3$Z4$Z5$Z6$Z7 -j RETURN
	fi
	for n in $(seq 1 7)
	do
		unset "Z$n"
	done
done
}

get_disrule(){
	macaddr=$1
	mode=$2
	distype=$3
	is_disrule=0
	index=`uci show $distype | grep "@acl_rule" |grep -w "$macaddr" |awk -F'.' '{print $2}'`
	[ -n "$index" ] && [ "`uci -q get $distype.$index.$mode`" == "disable" ] && is_disrule=1
}

del_rule(){
	type=$1
	blackMacAdd=$(iptables -t nat -L $type | grep -w RETURN | grep -w "MAC" | awk '{print $7}')
	[ -n "$blackMacAdd" ] && {
		for macaddrb in $blackMacAdd
		do
			if [ "$type" == "KOOLPROXY" ]; then
				get_disrule $macaddrb filter_mode koolproxy
			else
				get_disrule $macaddrb proxy_mode shadowsocks
			fi
			[ "$is_disrule" -eq 1 ] && continue
			blackMacnums=`iptables -t nat -L $type --line-num | grep -w RETURN | grep -w "MAC" | grep -w "$macaddrb" | wc -l`
			if [ ! -z "$blackMacnums" ];then
				until [ "$blackMacnums" = 0 ]
				do
					line_num=`iptables -t nat -L $type --line-num | grep -w RETURN | grep -w "MAC" | grep -w "$macaddrb" | awk '{print $1}'`
					for line in $line_num
					do
						iptables -t nat -D $type $line
						continue
					done
					blackMacnums=`expr $blackMacnums - 1`
				done
			fi
			
		done
	}	
}

start(){
	! load_config && exit 0
	iptables -L FORWARD|grep -c MIA 2>/dev/null && [ $? -eq 0 ] && exit 0;
	iptables -t filter -N MIA
	iptables -t filter -I FORWARD -m comment --comment "Rule For Control" -j MIA
	add_rule
	[ "$(uci show ucitrack.@shadowsocks[0].affects |grep -c mia)" -eq 0 ] && uci add_list ucitrack.@shadowsocks[0].affects=mia && uci commit ucitrack
}
stop(){
	iptables -t filter -D FORWARD -m comment --comment "Rule For Control" -j MIA
	iptables -t filter -F MIA
	iptables -t filter -X MIA
	[ "`iptables -t nat -L PREROUTING |grep SHADOWSOCKS 2>/dev/null |wc -l`" -gt 0 ] && del_rule SHADOWSOCKS
	[ "`iptables -t nat -L PREROUTING |grep KOOLPROXY 2>/dev/null |wc -l`" -gt 0 ] && del_rule KOOLPROXY
}

